p1 = predict(lep1, se = TRUE, newdata=list(sal=lep1pred$x, year = lep1pred$group, site.region = lep1pred$facet))
m1 = glm(y ~ x1)
p1 = predict(m1, se=TRUE, newdata=list(x1=factor(1), x2=15))
x1 = as.factor(c(rep(0,n/2), rep(1,n/2))) # two groups: x1=0, and x1=1
x2 = rnorm(n, mean=10, sd=3)
m1 = glm(y ~ x1)
p1 = predict(m1, se=TRUE, newdata=list(x1=factor(1), x2=15))
p1$fit
p1 = predict(lep1, se = TRUE, newdata=list(sal=lep1pred$x, year = lep1pred$group, site.region = lep1pred$facet, collection = 10))
p1 = predict(lep1, se = TRUE, newdata=list(sal=lep1pred$x, year = lep1pred$group, site.region = lep1pred$facet, collection = lep1pred$std.error))
p1 = predict(lep1, se = TRUE, newdata=list(sal=lep1pred$x, year = lep1pred$group, site.region = lep1pred$facet, collection = as.factor(lep1pred$std.error)))
View(p1)
p1 = predict(lep1, se = TRUE, newdata=list(sal=lep1pred$x, year = lep1pred$group, site.region = lep1pred$facet, collection = as.factor(c(1:50))))
p2 = predict(lep2, se = TRUE, newdata=list(sal=lep1pred$x, year = lep1pred$group, site.region = lep1pred$facet, collection = as.factor(lep1pred$std.error)))
theta.hats = c(p1$fit, p2$fit)
setheta.hats = c(p1$se.fit, p2$se.fit)
mata.wald(theta.hats=theta.hats, se.theta.hats=se.theta.hats,
model.weights=model.weights, mata.t=FALSE)
theta.hats
setheta.hats
theta.hats = c(p1$fit)
theta.hats
x1 = as.factor(c(rep(0,n/2), rep(1,n/2))) # two groups: x1=0, and x1=1
x2 = rnorm(n, mean=10, sd=3)
m1 = glm(y ~ x1)
m2 = glm(y ~ x1 + x2) # using 'lm' doesn't.
aic = c(m1$aic, m2$aic)
delta.aic = aic - min(aic)
model.weights = exp(-0.5*delta.aic) / sum(exp(-0.5*delta.aic))
residual.dfs = c(m1$df.residual, m2$df.residual)
p1 = predict(m1, se=TRUE, newdata=list(x1=factor(1), x2=15))
p2 = predict(m2, se=TRUE, newdata=list(x1=factor(1), x2=15))
theta.hats = c(p1$fit, p2$fit)
se.theta.hats = c(p1$se.fit, p2$se.fit)
mata.wald(theta.hats=theta.hats, se.theta.hats=se.theta.hats,
model.weights=model.weights, mata.t=FALSE)
##fitted value 1
#get the theta hats for the first prediction and the SE of theta hat
thetahatsleps = c(lep1pred$predicted[1], lep2pred$predicted[1], lep3pred$predicted[1], lep4pred$predicted[1],
lep5pred$predicted[1], lep6pred$predicted[1], lep7pred$predicted[1], lep8pred$predicted[1])
sethetahatsleps=c(lep1pred$std.error[1], lep2pred$std.error[1], lep3pred$std.error[1], lep4pred$std.error[1],
lep5pred$std.error[1], lep6pred$std.error[1], lep7pred$std.error[1], lep8pred$std.error[1])
#run the function
lepsCI1 = mata.wald(theta.hats = thetahatsleps, se.theta.hats = sethetahatsleps,
model.weights = modelweightsleps[c(1:8)], mata.t = FALSE)
lepsCI1
thetahatsleps
sethetahatsleps
theta.hats
se.theta.hats
m3 = glm(y ~ x1*x2)
aic = c(m1$aic, m2$aic, m3$aic)
delta.aic = aic - min(aic)
model.weights = exp(-0.5*delta.aic) / sum(exp(-0.5*delta.aic))
p3 = predict(m3, se=TRUE, newdata=list(x1=factor(1), x2=15))
theta.hats = c(p1$fit, p2$fit, p3$fit)
se.theta.hats = c(p1$se.fit, p2$se.fit, p2$se.fit)
mata.wald(theta.hats=theta.hats, se.theta.hats=se.theta.hats,
model.weights=model.weights, mata.t=FALSE)
theta.hats
aic = c(m1$aic, m2$aic, m3$aic)
aic
m1 = ggpredict(m1)
cal8pred <- ggpredict(cal8, terms = c('spp', 'year', 'site.region'))
library(tidyverse)
library(glmmTMB)
library(ggeffects)
library(DHARMa)
library(MuMIn)
library(cowplot)
library(AICcmodavg)
library(latexpdf)
library(MATA)
m1 = ggpredict(m1)
View(m1)
cal8pred <- ggpredict(cal8, terms = c('spp', 'year', 'site.region'))
m1 = ggpredict(m1, terms = c(x1, x2))
m1 = ggpredict(m1, terms = c('x1', 'x2'))
m1 = ggpredict(m1)
m1 = ggpredict(m1)
m1 = glm(y ~ x1)
m1p = ggpredict(m1)
m1p = data.frame(m1p)
View(m1p)
mata.wald(theta.hats=theta.hats, se.theta.hats=se.theta.hats,
model.weights=model.weights, mata.t=FALSE)
theta.hats[1] + c(-1,1)*qt(0.975, residual.dfs[1])*se.theta.hats[1]
aic = lepmod.crossed_dredge$AICc[1:8]
delta.aic = aic - min(aic)
model.werights = exp(-0.5*delta.aic)/sum(exp(-0.5*delta.aic))
p1 = predict(lep1, se = TRUE, newdata=list(sal=lep1pred$x, year = lep1pred$group, site.region = lep1pred$facet, collection = as.factor(lep1pred$std.error)))
p2 = predict(lep2, se = TRUE, newdata=list(sal=lep1pred$x, year = lep1pred$group, site.region = lep1pred$facet, collection = as.factor(lep1pred$std.error)))
theta.hats = c(p1$fit, p2$fit)
setheta.hats = c(p1$se.fit, p2$se.fit)
mata.wald(theta.hats=theta.hats, se.theta.hats=se.theta.hats,
model.weights=model.weights, mata.t=FALSE)
theta.hats
setheta.hats
p1$fit
p2$fit
p1$se.fit
length(p1)
length(p1$fit)
length(p1$sefit)
length(p1$se.fit)
length(theta.hats)
length(setheta.hats)
mata.wald(theta.hats=theta.hats, se.theta.hats=se.theta.hats,
model.weights=model.weights, mata.t=FALSE)
mata.wald(theta.hats=theta.hats, se.theta.hats=setheta.hats,
model.weights=model.weights, mata.t=FALSE)
mata.wald(theta.hats=theta.hats, se.theta.hats=setheta.hats,
model.weights=model.werights, mata.t=FALSE)
length(model.werights)
model.weights
theta.hats = c(p1$fit, p2$fit, p3$fit)
se.theta.hats = c(p1$se.fit, p2$se.fit, p2$se.fit)
length(theta.hats)
length(se.theta.hats)
mata.wald(theta.hats=theta.hats, se.theta.hats=se.theta.hats,
model.weights=model.weights, mata.t=FALSE)
model.weights = exp(-0.5*delta.aic) / sum(exp(-0.5*delta.aic))
residual.dfs = c(m1$df.residual, m2$df.residual)
p1 = predict(m1, se=TRUE, newdata=list(x1=factor(1), x2=15))
p2 = predict(m2, se=TRUE, newdata=list(x1=factor(1), x2=15))
p3 = predict(m3, se=TRUE, newdata=list(x1=factor(1), x2=15))
theta.hats = c(p1$fit, p2$fit, p3$fit)
se.theta.hats = c(p1$se.fit, p2$se.fit, p2$se.fit)
length(se.theta.hats)
length(theta.hats)
mata.wald(theta.hats=theta.hats, se.theta.hats=se.theta.hats,
model.weights=model.weights, mata.t=FALSE)
se.theta.hats = c(p1$se.fit, p2$se.fit, p3$se.fit)
length(theta.hats)
mata.wald(theta.hats=theta.hats, se.theta.hats=se.theta.hats,
model.weights=model.weights, mata.t=FALSE)
x1 = as.factor(c(rep(0,n/2), rep(1,n/2))) # two groups: x1=0, and x1=1
x2 = rnorm(n, mean=10, sd=3)
m1 = glm(y ~ x1)
m2 = glm(y ~ x1 + x2) # using 'lm' doesn't.
m3 = glm(y ~ x1*x2)
aic = c(m1$aic, m2$aic, m3$aic)
delta.aic = aic - min(aic)
model.weights = exp(-0.5*delta.aic) / sum(exp(-0.5*delta.aic))
residual.dfs = c(m1$df.residual, m2$df.residual)
p1 = predict(m1, se=TRUE, newdata=list(x1=factor(1), x2=15))
p2 = predict(m2, se=TRUE, newdata=list(x1=factor(1), x2=15))
p3 = predict(m3, se=TRUE, newdata=list(x1=factor(1), x2=15))
theta.hats = c(p1$fit, p2$fit, p3$fit)
se.theta.hats = c(p1$se.fit, p2$se.fit, p3$se.fit)
mata.wald(theta.hats=theta.hats, se.theta.hats=se.theta.hats,
model.weights=model.weights, mata.t=FALSE)
############################################## Leps
aic = lepmod.crossed_dredge$AICc[1:8]
delta.aic = aic - min(aic)
model.weights = exp(-0.5*delta.aic)/sum(exp(-0.5*delta.aic))
p1 = predict(lep1, se = TRUE, newdata=list(sal=1, year = 2015, site.region = 'DI'))
p1 = predict(lep1, se = TRUE, newdata=list(sal=1, year = 2015, site.region = 'DI', collection = 1))
p1 = predict(lep1, se = TRUE, allow.new.levels = FALSE, newdata=list(sal=1, year = 2015, site.region = 'DI'))
lepmodavg1 = model.avg(lepconfset1)
lepconfset1 = get.models(lepmod.crossed_dredge, subset = TRUE)
lepmodavg1 = model.avg(lepconfset1)
lepmodavg1
lepmodavg1$avg.model
unique(mainlice$collection)
p1 = predict(lep1, se = TRUE, allow.new.levels = FALSE, newdata=list(sal=1, year = 2015, site.region = 'DI'))
p1 = predict(lep1, se = TRUE, allow.new.levels = FALSE, newdata=list(sal=factor(1), year = factor(2015),
site.region = 'DI',collection = factor(1)))
p1 = predict(lep1, se = TRUE, allow.new.levels = TRUE, newdata=list(sal=factor(1), year = factor(2015),
site.region = 'DI',collection = factor(1)))
newdata
newdata=list(sal=factor(1), year = factor(2015),
site.region = 'DI',collection = factor(1))
newdata
p1 = predict(lep1, se = TRUE, newdata=list(sal=factor(1), year = factor(2015),
site.region = 'DI',collection = factor(1)))
p1 = predict(lep1, se = TRUE, newdata=list(sal=factor(1), year = factor(2015),
site.region = DI,collection = factor(1)))
p1 = predict(lep1, se = TRUE, newdata=list(sal=rep(factor(1), 52), year = rep(factor(2015), 52),
site.region = rep(x = 'DI', 52),collection = seq(1:52)))
p1 = predict(m1, se=TRUE, newdata=list(x1=factor(1), x2=15))
newdata
newdata=list(x1=factor(1), x2=15)
newdata
m1
site.region = rep(x = 'DI', 52),collection = 0)
p1 = predict(lep1, se = TRUE, newdata=list(sal=factor(1), year = factor(2015),
site.region = 'DI',collection = 0))
newdata=list(sal=factor(1), year = factor(2015),site.region = 'DI',collection = 0)
View(newdata)
p1 = predict(lep1, se = TRUE, newdata=newdata)
p1 = predict(m1, se=TRUE, newdata=list(x1=factor(1), x2=15))
newdata=list(x1=factor(1), x2=15)
newdata
newdata=list(sal=factor(1), year = factor(2015),site.region = 'DI',collection = NULL)
p1 = predict(lep1, se = TRUE, newdata=newdata)
newdata=list(sal=factor(1), year = factor(2015),site.region = 'DI')
p1 = predict(lep1, se = TRUE, newdata=newdata)
p1 = predict(lep1, se = TRUE, newdata=newdata, type = 'response')
p1 = predict(lep1, se = TRUE)
p2 = predict(lep2, se = TRUE)
theta.hats = c(p1$fit, p2$fit)
setheta.hats = c(p1$se.fit, p2$se.fit)
model.weights = exp(-0.5*delta.aic)/sum(exp(-0.5*delta.aic))
length(model.weights)
length(theta.hats)
mata.wald(theta.hats=theta.hats, se.theta.hats=setheta.hats,
model.weights=model.werights, mata.t=FALSE)
lepmodavg1 = model.avg(lepconfset1, subset = cumsum(weight) <= .95)
leppredict1 = data.frame(
model = sapply(lepconfset1, predict, newdata=newdata),
averagedfull = predict(lepmodavg1, newdata, full = TRUE)
)
DI = as.vector(rep('DI', 12)); JS = as.vector(rep('JS', 12))
f = as.vector(rep('2015', 3)); si = as.vector(rep('2016', 3)); sv = as.vector(rep('2017', 3)); e = as.vector(rep('2018', 3))
year = as.vector(cbind(f, si, sv, e)); year = as.vector(replicate(2, year))
CU = 'CU'; PI = 'PI'; SO = 'SO'
spp = as.vector(rbind(CU, PI, SO)); spp = as.vector(replicate(8, spp))
newdata <- matrix(nrow = 24, ncol = 4)
newdata[c(1:12), 1] = DI; newdata[c(13:24), 1] = JS
newdata[c(1:24), 2] = year
newdata[c(1:24), 3] = spp
newdata = data.frame(newdata)
newdata = newdata %>%
rename(site.region = `X1`, year = `X2`, spp = `X3`, collection = `X4`)
newdata
newdata
DI = as.vector(rep('DI', 12)); JS = as.vector(rep('JS', 12))
f = as.vector(rep('2015', 3)); si = as.vector(rep('2016', 3)); sv = as.vector(rep('2017', 3)); e = as.vector(rep('2018', 3))
year = as.vector(cbind(f, si, sv, e)); year = as.vector(replicate(2, year))
CU = 'CU'; PI = 'PI'; SO = 'SO'
spp = as.vector(rbind(CU, PI, SO)); spp = as.vector(replicate(8, spp))
newdata <- matrix(nrow = 24, ncol = 4)
newdata[c(1:12), 1] = DI; newdata[c(13:24), 1] = JS
newdata[c(1:24), 2] = year
newdata[c(1:24), 3] = spp
newdata = data.frame(newdata)
newdata = newdata %>%
rename(site.region = `X1`, year = `X2`, spp = `X3`, collection = `X4`)
newdata
View(newdata)
mata.wald(theta.hats=theta.hats, se.theta.hats=setheta.hats,
model.weights=model.werights, mata.t=FALSE)
p1 = predict(lep1, se = TRUE, newdata = newdata[1])
View(newdata)
x1 = as.factor(c(rep('A',n/2), rep('B',n/2)))
x1 = as.factor(c(rep(0,n/2), rep(1,n/2))) # two groups: x1=0, and x1=1
x3 = as.factor(c(rep('A',n/2), rep('B',n/2)))
m1 = glm(y ~ x1 + (1|x3))
m3 = glm(y ~ x1*x2 + (1|x3))
newdata=list(sal=factor(1), year = factor(2015),site.region = 'DI')
p1 = predict(lep1, se = TRUE,re.form = NA, newdata = newdata[1])
############################################## Leps
library(lme4)
lep1 = glmer.nb(all.leps ~ site.region + year + spp +
site.region * year +
(1 | collection), data = mainlice, family = nbinom2)
?glmer.nb
lep1 = glmer.nb(all.leps ~ site.region + year + spp +
site.region * year +
(1 | collection), data = mainlice)
p1 = predict(lep1, se = TRUE,re.form = ~0, newdata = newdata[1])
lep1 = glmmTMB(all.leps ~ site.region + year + spp +
site.region * year +
(1 | collection), data = mainlice, family = nbinom2)
p1 = predict(lep1, se = TRUE,re.form = ~0, newdata = newdata[1])
p1 = predict(m1, se=TRUE, newdata=list(x1=factor(1), x2=15))
p2 = predict(m2, se=TRUE, newdata=list(x1=factor(1), x2=15))
p3 = predict(m3, se=TRUE, newdata=list(x1=factor(1), x2=15))
theta.hats = c(p1$fit, p2$fit, p3$fit)
se.theta.hats = c(p1$se.fit, p2$se.fit, p3$se.fit)
length(theta.hats)
p1$fit
length(thetahatlep)
length(thetahatleps)
thetahatsleps = c(lep1pred$predicted[1], lep2pred$predicted[1], lep3pred$predicted[1], lep4pred$predicted[1],
lep5pred$predicted[1], lep6pred$predicted[1], lep7pred$predicted[1], lep8pred$predicted[1])
sethetahatsleps=c(lep1pred$std.error[1], lep2pred$std.error[1], lep3pred$std.error[1], lep4pred$std.error[1],
lep5pred$std.error[1], lep6pred$std.error[1], lep7pred$std.error[1], lep8pred$std.error[1])
length(thetahatleps)
length(thetahatsleps)
length(sethetahatsleps)
#run the function
lepsCI1 = mata.wald(theta.hats = thetahatsleps, se.theta.hats = sethetahatsleps,
model.weights = modelweightsleps[c(1:8)], mata.t = FALSE)
lepsCI1
thetahatsleps
sethetahatsleps
?select_prediction_method
??select_prediction_method
debug(ggeffects::ggpredict)
lep1pred <- ggeffects::ggpredict(lep1, terms = c('spp', 'year', 'site.region'))
View(res)
undebug(ggpredict)
pnorm(z.quantiles)
z.quantiles = (theta-theta.hats)/se.theta.hats
debug(mata.wald)
mata.wald(theta.hats=theta.hats, se.theta.hats=se.theta.hats,
model.weights=model.weights, mata.t = FALSE)
x1 = c(rep(0,n/2), rep(1,n/2)) # two groups: x1=0, and x1=1
x2 = rnorm(n, mean=10, sd=3)
y = rnorm(n, mean = 3*x1 + 0.1*x2) # data generation
x1 = factor(x1)
m1 = glm(y ~ x1) # using 'glm' provides AIC values.
m2 = glm(y ~ x1 + x2) # using 'lm' doesn't.
m3 = glm(y ~ x1*x2)
aic = c(m1$aic, m2$aic, m3$aic)
delta.aic = aic - min(aic)
model.weights = exp(-0.5*delta.aic) / sum(exp(-0.5*delta.aic))
residual.dfs = c(m1$df.residual, m2$df.residual, m3$df.residual)
p1 = predict(m1, se=TRUE, newdata=list(x1=factor(1), x2=15))
p2 = predict(m2, se=TRUE, newdata=list(x1=factor(1), x2=15))
p3 = predict(m3, se=TRUE, newdata=list(x1=factor(1), x2=15))
theta.hats = c(p1$fit, p2$fit, p3$fit)
se.theta.hats = c(p1$se.fit, p2$se.fit, p3$se.fit)
mata.wald(theta.hats=theta.hats, se.theta.hats=se.theta.hats,
model.weights=model.weights, mata.t = FALSE)
((3.289499*0.3313084) + (3.228804*0.1733297) + (3.735886*0.4953619))
?qt
# relationship between variance and standard error
x = VarCorr(lep1)
summary(x)
1-0.05
(1-2*0.05)
thetahat = lepallpred$avg[1]
thetahatsIleps
############################################## Leps
# relationship between variance and standard error
#interval = thetahat +- z*var(thetahat)^1/2
#where z is (1-alpha) -> if alpha is 0.05, z = 0.95
thetahatsIleps = c(lep1pred$predicted[1], lep2pred$predicted[1], lep3pred$predicted[1], lep4pred$predicted[1],
lep5pred$predicted[1], lep6pred$predicted[1], lep7pred$predicted[1], lep8pred$predicted[1])
thetahatsIleps
model.weights = modelweightsleps[c(1:8)]
model.weights
sethetahatsleps=c(lep1pred$std.error[1], lep2pred$std.error[1], lep3pred$std.error[1], lep4pred$std.error[1],
lep5pred$std.error[1], lep6pred$std.error[1], lep7pred$std.error[1], lep8pred$std.error[1])
varx = sum((model.weights[1]*(((sethetahatsleps[1])^2)*(length(mainlice))+((thetahatsIleps[1]-thetahat)^2))),
(model.weights[2]*(((sethetahatsleps[2])^2)*(length(mainlice))+((thetahatsIleps[2]-thetahat)^2)))
(model.weights[3]*(((sethetahatsleps[3])^2)*(length(mainlice))+((thetahatsIleps[3]-thetahat)^2)))
(model.weights[4]*(((sethetahatsleps[4])^2)*(length(mainlice))+((thetahatsIleps[4]-thetahat)^2)))
(model.weights[5]*(((sethetahatsleps[5])^2)*(length(mainlice))+((thetahatsIleps[5]-thetahat)^2)))
(model.weights[6]*(((sethetahatsleps[6])^2)*(length(mainlice))+((thetahatsIleps[6]-thetahat)^2)))
(model.weights[7]*(((sethetahatsleps[7])^2)*(length(mainlice))+((thetahatsIleps[7]-thetahat)^2)))
(model.weights[8]*(((sethetahatsleps[8])^2)*(length(mainlice))+((thetahatsIleps[8]-thetahat)^2))))
varx = sum((model.weights[1]*(((sethetahatsleps[1])^2)*(length(mainlice))+((thetahatsIleps[1]-thetahat)^2))),
(model.weights[2]*(((sethetahatsleps[2])^2)*(length(mainlice))+((thetahatsIleps[2]-thetahat)^2))),
(model.weights[3]*(((sethetahatsleps[3])^2)*(length(mainlice))+((thetahatsIleps[3]-thetahat)^2))),
(model.weights[4]*(((sethetahatsleps[4])^2)*(length(mainlice))+((thetahatsIleps[4]-thetahat)^2))),
(model.weights[5]*(((sethetahatsleps[5])^2)*(length(mainlice))+((thetahatsIleps[5]-thetahat)^2))),
(model.weights[6]*(((sethetahatsleps[6])^2)*(length(mainlice))+((thetahatsIleps[6]-thetahat)^2))),
(model.weights[7]*(((sethetahatsleps[7])^2)*(length(mainlice))+((thetahatsIleps[7]-thetahat)^2))),
(model.weights[8]*(((sethetahatsleps[8])^2)*(length(mainlice))+((thetahatsIleps[8]-thetahat)^2))))
varx^1/2
thetahatsIleps[1]-thetahat
(sethetahatsleps[1])^2)*(length(mainlice))
(sethetahatsleps[1])^2)*(length(mainlice)
((sethetahatsleps[1])^2)*(length(mainlice))
0.05*varx
0.05*varx^1/2
x = 0.05*varx^1/2
thetahat-x
thetahat
conf.low = thetahat - (0.05*varx^1/2)
conf.high = thetahat - (0.05*varx^1/2)
conf.high = thetahat + (0.05*varx^1/2)
lepallpred$conf.high[1] = (thetahat + (0.05*varx^1/2))
lepallpred$conf.low[1] = (thetahat - (0.05*varx^1/2))
2.834294e-01 < 0.1313463
thetahatsIleps =c(lep1pred$predicted[1], lep2pred$predicted[1], lep3pred$predicted[1], lep4pred$predicted[1],
lep5pred$predicted[1], lep6pred$predicted[1], lep7pred$predicted[1], lep8pred$predicted[1])
sethetahatsleps=c(lep1pred$std.error[1], lep2pred$std.error[1], lep3pred$std.error[1], lep4pred$std.error[1],
lep5pred$std.error[1], lep6pred$std.error[1], lep7pred$std.error[1], lep8pred$std.error[1])
thetahat = lepallpred$avg[1]
model.weights = modelweightsleps[c(1:8)]
varx = sum((model.weights[1]*(((sethetahatsleps[1])^2)*(length(mainlice))+((thetahatsIleps[1]-thetahat)^2))),
(model.weights[2]*(((sethetahatsleps[2])^2)*(length(mainlice))+((thetahatsIleps[2]-thetahat)^2))),
(model.weights[3]*(((sethetahatsleps[3])^2)*(length(mainlice))+((thetahatsIleps[3]-thetahat)^2))),
(model.weights[4]*(((sethetahatsleps[4])^2)*(length(mainlice))+((thetahatsIleps[4]-thetahat)^2))),
(model.weights[5]*(((sethetahatsleps[5])^2)*(length(mainlice))+((thetahatsIleps[5]-thetahat)^2))),
(model.weights[6]*(((sethetahatsleps[6])^2)*(length(mainlice))+((thetahatsIleps[6]-thetahat)^2))),
(model.weights[7]*(((sethetahatsleps[7])^2)*(length(mainlice))+((thetahatsIleps[7]-thetahat)^2))),
(model.weights[8]*(((sethetahatsleps[8])^2)*(length(mainlice))+((thetahatsIleps[8]-thetahat)^2))))
lepallpred$conf.low[1] = (thetahat - (0.05*varx^1/2))
lepallpred$conf.high[1] = (thetahat + (0.05*varx^1/2))
thetahatsIleps =c(lep1pred$predicted[2], lep2pred$predicted[2], lep3pred$predicted[2], lep4pred$predicted[2],
lep5pred$predicted[2], lep6pred$predicted[2], lep7pred$predicted[2], lep8pred$predicted[2])
sethetahatsleps=c(lep1pred$std.error[2], lep2pred$std.error[2], lep3pred$std.error[2], lep4pred$std.error[2],
lep5pred$std.error[2], lep6pred$std.error[2], lep7pred$std.error[2], lep8pred$std.error[2])
thetahat = lepallpred$avg[2]
model.weights = modelweightsleps[c(1:8)]
varx = sum((model.weights[1]*(((sethetahatsleps[1])^2)*(length(mainlice))+((thetahatsIleps[1]-thetahat)^2))),
(model.weights[2]*(((sethetahatsleps[2])^2)*(length(mainlice))+((thetahatsIleps[2]-thetahat)^2))),
(model.weights[3]*(((sethetahatsleps[3])^2)*(length(mainlice))+((thetahatsIleps[3]-thetahat)^2))),
(model.weights[4]*(((sethetahatsleps[4])^2)*(length(mainlice))+((thetahatsIleps[4]-thetahat)^2))),
(model.weights[5]*(((sethetahatsleps[5])^2)*(length(mainlice))+((thetahatsIleps[5]-thetahat)^2))),
(model.weights[6]*(((sethetahatsleps[6])^2)*(length(mainlice))+((thetahatsIleps[6]-thetahat)^2))),
(model.weights[7]*(((sethetahatsleps[7])^2)*(length(mainlice))+((thetahatsIleps[7]-thetahat)^2))),
(model.weights[8]*(((sethetahatsleps[8])^2)*(length(mainlice))+((thetahatsIleps[8]-thetahat)^2))))
lepallpred$conf.low[2] = (thetahat - (0.05*varx^1/2))
lepallpred$conf.high[2] = (thetahat + (0.05*varx^1/2))
varx
lep1pred$predicted[2]
thetahatsIleps
sethetahatsleps
varx
(thetahat - (0.05*varx^1/2))
(thetahat + (0.05*varx^1/2))
(thetahat - (0.025*varx^1/2))
1-0.05
(thetahat - (0.95*varx^1/2))
(thetahat - (0.95*varx)^1/2)
((sethetahatsleps[1])^2)*(length(mainlice))
sethetahatsleps[1]
(sethetahatsleps[1])^2
summary(lep1)
length(mainlice)
############################################## Leps
# relationship between variance and standard error
#interval = thetahat +- z*var(thetahat)^1/2
#where z is (1-alpha) -> if alpha is 0.05, z = 0.95
####so we need to do this for all the predictions
n = 1835
((sethetahatsleps[1])^2)*(n)
((sethetahatsleps[1])^2)*(35)
((sethetahatsleps[1])^2)*(n)+((thetahatsIleps[1]-thetahat)^2))
(((sethetahatsleps[1])^2)*(n)+((thetahatsIleps[1]-thetahat)^2))
varx
(thetahat - (0.95*varx)^1/2)
(model.weights[1]*(((sethetahatsleps[1])^2)*(n)+((thetahatsIleps[1]-thetahat)^2)))
model.weights[1]*(((sethetahatsleps[1])^2)*(n)+((thetahatsIleps[1]-thetahat)^2))
model.weights[1]
thetahatsIleps
lep1pred$predicted[1]
# 1
thetahatsIleps =c(lep1pred$predicted[1], lep2pred$predicted[1], lep3pred$predicted[1], lep4pred$predicted[1],
lep5pred$predicted[1], lep6pred$predicted[1], lep7pred$predicted[1], lep8pred$predicted[1])
sethetahatsleps=c(lep1pred$std.error[1], lep2pred$std.error[1], lep3pred$std.error[1], lep4pred$std.error[1],
lep5pred$std.error[1], lep6pred$std.error[1], lep7pred$std.error[1], lep8pred$std.error[1])
thetahat = lepallpred$avg[1]
model.weights = modelweightsleps[c(1:8)]
varx = sum((model.weights[1]*(((sethetahatsleps[1])^2)*(n)+((thetahatsIleps[1]-thetahat)^2))),
(model.weights[2]*(((sethetahatsleps[2])^2)*(n)+((thetahatsIleps[2]-thetahat)^2))),
(model.weights[3]*(((sethetahatsleps[3])^2)*(n)+((thetahatsIleps[3]-thetahat)^2))),
(model.weights[4]*(((sethetahatsleps[4])^2)*(n)+((thetahatsIleps[4]-thetahat)^2))),
(model.weights[5]*(((sethetahatsleps[5])^2)*(n)+((thetahatsIleps[5]-thetahat)^2))),
(model.weights[6]*(((sethetahatsleps[6])^2)*(n)+((thetahatsIleps[6]-thetahat)^2))),
(model.weights[7]*(((sethetahatsleps[7])^2)*(n)+((thetahatsIleps[7]-thetahat)^2))),
(model.weights[8]*(((sethetahatsleps[8])^2)*(n)+((thetahatsIleps[8]-thetahat)^2))))
varx
(thetahat - (0.95*varx)^1/2)
var(10)
var(lep1)
summary(lep1)
View(lep3pred)
x=3
x^1/2
y = x^1/2
y^2
1.5*1.5
x = 6
y = x^1/2
y82
y*2
lepconfset1 = get.models(lepmod.crossed_dredge, subset = TRUE)
lepmodavg1 = model.avg(lepconfset1, subset = cumsum(weight) <= .95)
leppredict1 = data.frame(
model = sapply(lepconfset1, ggpredict),
averagedfull = ggpredict(lepmodavg1, full = TRUE)
)
model = sapply(lepconfset1, ggpredict),
leppredict1 = data.frame(
model = sapply(lepconfset1, ggpredict),
averagedfull = ggpredict(lepmodavg1, terms = c('spp', 'year', 'site.region')))
leppredict1 = data.frame(
model = sapply(lepconfset1, predict),
averagedfull = ggpredict(lepmodavg1, terms = c('spp', 'year', 'site.region')))
averagedfull = ggpredict(lepmodavg1, terms = c('spp', 'year', 'site.region'))
averagedfull = ggpredict(lepconfset1, terms = c('spp', 'year', 'site.region'))
leppredict1 = data.frame(
model = sapply(lepconfset1, predict),
averagedfull = ggpredict(leplist, terms = c('spp', 'year', 'site.region')))
#trying the AICcmodavg package
leplist = list(
glmmTMB(all.leps ~ site.region + year + spp +
site.region * year +
(1 | collection), data = mainlice, family = nbinom2),
glmmTMB(all.leps ~ site.region + year + spp +
spp * year + site.region * year +
(1 | collection), data = mainlice, family = nbinom2),
glmmTMB(all.leps ~ site.region + year + spp +
spp * site.region + site.region * year +
(1 | collection), data = mainlice, family = nbinom2),
glmmTMB(all.leps ~ site.region + year + spp +
spp * site.region + spp * year + site.region * year +
(1 | collection), data = mainlice, family = nbinom2),
glmmTMB(all.leps ~ site.region + year + spp +
(1 | collection), data = mainlice, family = nbinom2),
glmmTMB(all.leps ~ site.region + year + spp +
spp * year +
(1 | collection), data = mainlice, family = nbinom2),
glmmTMB(all.leps ~ site.region + year + spp +
spp * site.region +
(1 | collection), data = mainlice, family = nbinom2),
glmmTMB(all.leps ~ site.region + year + spp +
spp * site.region + spp * year +
(1 | collection), data = mainlice, family = nbinom2),
glmmTMB(all.leps ~ site.region + year +
site.region * year +
(1 | collection), data = mainlice, family = nbinom2),
glmmTMB(all.leps ~ site.region + year +
(1 | collection), data = mainlice, family = nbinom2))
