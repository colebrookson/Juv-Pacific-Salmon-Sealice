#now make a new DF to predict over
DI = data.frame(DI = rep('DI'), 12)
#now make a new DF to predict over
DI = data.frame(DI = rep('DI', 12))
region = rbind(data.frame(DI = rep('DI', 12)), data.frame(JS = rep('JS', 12)))
region = cbind(data.frame(DI = rep('DI', 12)), data.frame(JS = rep('JS', 12)))
region = rbind(data.frame(DI = rep('DI', 12)), data.frame(JS = rep('JS', 12)))
region = rbind(data.frame(rep('DI', 12)), data.frame(rep('JS', 12)))
region = rbind(EI, JS)
#now make a new DF to predict over
DI = data.frame(DI = rep('DI', 12)); JS = data.frame(JS = rep('JS', 12))
region = rbind(EI, JS)
region = rbind(dI, JS)
region = rbind(DI, JS)
View(JS)
JS = rep('JS', 12)
summary(calmod.crossed.top)
region = data.frame(rbiind(DI, JS))
region = data.frame(rbind(DI, JS))
region = DI + JS
newdata <- matrix(24, 4)
newdata <- matrix(24, 4); newdata[1:12, ] = DI
newdata <- matrix(24, 4); newdata[c(1:12), ] = DI
newdata <- matrix(24, 4)
newdata[c(1:12), ]
newdata <- matrix(24, 4); newdata[1:12, ] = DI
newdata[1:12, ]
newdata <- matrix(rows = 24, cols = 4)
newdata <- matrix(row = 24, col = 4)
newdata <- matrix(nrow = 24, ncol = 4)
newdata[1:12, ]
newdata <- matrix(nrow = 24, ncol = 4)
newdata[1:12, 1] = DI; newdata[13:24, 1] = JS
newdata[1:12, 1]
newdata[c(1:12), 1]
newdata <- matrix(nrow = 24, ncol = 4)
newdata[c(1:12), 1]
newdata <- matrix(nrow = 24, ncol = 4)
newdata[c(1:12), 1] = DI; newdata[c(13:24), 1] = JS
newdata <- matrix(nrow = 24, ncol = 4)
newdata[c(1:12), 1]
as.matrix(newdata[c(1:12), 1] = DI); newdata[c(13:24), 1] = JS
as.matrix(newdata[c(1:12), 1] = DI)
str(DI)
#now make a new DF to predict over
DI = as.vector(rep('DI', 12)); JS = as.vector(rep('JS', 12))
DI = as.vector(rep('DI', 12)); JS = as.vector(rep('JS', 12))
fifteen = as.vector(rep('2015', 6)); sixteen = as.vector(rep('2016', 6))
seventeen = as.vector(rep('2017', 6)); eighteen = as.vector(rep('2018', 6))
CU = as.vector(rep('CU', 8)); PI = as.vector(rep('PI', 8)); SO = as.vector(rep('SO', 8))
newdata <- matrix(nrow = 24, ncol = 4)
newdata[c(1:12), 1] = DI; newdata[c(13:24), 1] = JS
newdata[c(1:6), 2] = fifteen; newdata[c(7:12), 2] = sixteen; newdata[c(13:18), 2] = seventeen; newdata[c(19:24), 2] = eighteen
newdata[c(1:8), 3] = CU; newdata[c(9:16), 3] = PI; newdata[c(17:24), 3] = SO
newdata = data.frame(newdata)
# Predictions from each of the models in a set, and with averaged coefficients
n = length(confleps)
n
View(newdata)
spp = rbind(CU, PI, SO)
spp
CU = 'CU'; PI = 'PI'; SO = 'SO'
spp = rbind(CU, PI, SO)
spp = as.vector(rbind(CU, PI, SO))
spp = as.vector(replicate(8, spp))
newdata[c(1:24), 3] = spp
newdata <- matrix(nrow = 24, ncol = 4)
newdata[c(1:12), 1] = DI; newdata[c(13:24), 1] = JS
newdata[c(1:6), 2] = fifteen; newdata[c(7:12), 2] = sixteen; newdata[c(13:18), 2] = seventeen; newdata[c(19:24), 2] = eighteen
newdata[c(1:24), 3] = spp
newdata = data.frame(newdata)
View(newdata)
f = '2015'; s = '2016'; sv = '2017'; e = '2018'
year = as.vector(rbind(f, s, sv, e)); year = as.vector(replicate(6, year))
DI = as.vector(rep('DI', 12)); JS = as.vector(rep('JS', 12))
f = '2015'; s = '2016'; sv = '2017'; e = '2018'
year = as.vector(rbind(f, s, sv, e)); year = as.vector(replicate(6, year))
CU = 'CU'; PI = 'PI'; SO = 'SO'
spp = as.vector(rbind(CU, PI, SO)); spp = as.vector(replicate(8, spp))
newdata <- matrix(nrow = 24, ncol = 4)
newdata[c(1:12), 1] = DI; newdata[c(13:24), 1] = JS
newdata[c(1:24), 2] = year
newdata[c(1:24), 3] = spp
newdata = data.frame(newdata)
View(newdata)
f = as.vector(rep('2015', 3)); si = as.vector(rep('2016', 3)); sv = as.vector(rep('2017', 3)); e = as.vector(rep('2018', 3))
year = as.vector(rbind(f, s, sv, e)); year = as.vector(replicate(2, year))
year = as.vector(rbind(f, si, sv, e)); year = as.vector(replicate(2, year))
newdata <- matrix(nrow = 24, ncol = 4)
newdata[c(1:12), 1] = DI; newdata[c(13:24), 1] = JS
newdata[c(1:24), 2] = year
newdata[c(1:24), 3] = spp
newdata = data.frame(newdata)
DI = as.vector(rep('DI', 12)); JS = as.vector(rep('JS', 12))
f = as.vector(rep('2015', 3)); si = as.vector(rep('2016', 3)); sv = as.vector(rep('2017', 3)); e = as.vector(rep('2018', 3))
year = as.vector(rbind(f, si, sv, e)); year = as.vector(replicate(2, year))
CU = 'CU'; PI = 'PI'; SO = 'SO'
spp = as.vector(rbind(CU, PI, SO)); spp = as.vector(replicate(8, spp))
newdata <- matrix(nrow = 24, ncol = 4)
newdata[c(1:12), 1] = DI; newdata[c(13:24), 1] = JS
newdata[c(1:24), 2] = year
newdata[c(1:24), 3] = spp
newdata = data.frame(newdata)
View(newdata)
f
year = as.vector(rbind(f, si, sv, e))
year
f
si
f = as.vector(rep('2015', 3)); si = as.vector(rep('2016', 3)); sv = as.vector(rep('2017', 3)); e = as.vector(rep('2018', 3))
year = as.vector(rbind(f, si, sv, e))
x = f + si
x = rbind(f, si)
x = cbind(f, si)
year = as.vector(cbind(f, si, sv, e)); year = as.vector(replicate(2, year))
CU = 'CU'; PI = 'PI'; SO = 'SO'
spp = as.vector(rbind(CU, PI, SO)); spp = as.vector(replicate(8, spp))
newdata[c(1:24), 2] = year
newdata = data.frame(newdata)
View(newdata)
pred <- data.frame(
model = sapply(confleps, predict, newdata = newdata),
averaged.subset = predict(lepavg, newdata, full = FALSE),
averaged.full = predict(lepavg, newdata, full = TRUE)
)
newdata = newdata %>%
rename(site.region = `X1`, year = `X2`, spp = `X3`)
newdata = newdata %>%
rename(site.region = `X1`, year = `X2`, spp = `X3`) %>%
select(-X4)
newdata <- matrix(nrow = 24, ncol = 4)
newdata[c(1:12), 1] = DI; newdata[c(13:24), 1] = JS
newdata[c(1:24), 2] = year
newdata[c(1:24), 3] = spp
newdata = data.frame(newdata)
newdata = newdata %>%
rename(site.region = `X1`, year = `X2`, spp = `X3`) %>%
select(-X4)
# Predictions from each of the models in a set, and with averaged coefficients
n = length(confleps)
pred <- data.frame(
model = sapply(confleps, predict, newdata = newdata),
averaged.subset = predict(lepavg, newdata, full = FALSE),
averaged.full = predict(lepavg, newdata, full = TRUE)
)
#start by getting the models and model averaging the estimates
confleps = get.models(lepmod.crossed_dredge, subset = TRUE)
#start by getting the models and model averaging the estimates
confleps = get.models(lepmod.crossed_dredge, subset = TRUE)
pred <- data.frame(
model = sapply(confleps, predict, newdata = newdata),
averaged.full = predict(lepavg, newdata, full = TRUE)
)
model = sapply(confleps, predict, newdata = newdata)
#now make a new DF to predict over
nseq <- function(x, len = length(x)) seq(min(x, na.rm = TRUE),
max(x, na.rm=TRUE), length = len)
summary(confleps)
data(cement)
View(cement)
# Example from Burnham and Anderson (2002), page 100:
fm1 <- lm(y ~ X1 + X2 + X3 + X4, data = Cement)
ms1 <- dredge(fm1)
# Example from Burnham and Anderson (2002), page 100:
fm1 <- lm(y ~ X1 + X2 + X3 + X4, data = cement)
View(cement)
# Example from Burnham and Anderson (2002), page 100:
fm1 <- lm(y ~ x1 + x2 + x3 + x4, data = cement)
ms1 <- dredge(fm1, )
ms1 <- dredge(fm1)
# Example from Burnham and Anderson (2002), page 100:
library(lme4)
fm1 <- lm(y ~ x1 + x2 + x3 + x4, data = cement)
ms1 <- dredge(fm1)
summary(fm1)
ms1 <- MuMIn::dredge(fm1)
ms1 <- MuMIn::dredge(fm1, na.action(fm1))
?na.action
ms1 <- MuMIn::dredge(fm1, na.action(na.omit))
ms1 <- MuMIn::dredge(fm1, na.action(na.omit(c(1,NA))))
ms1 <- MuMIn::dredge(fm1, global.model = fm1)
summary(fm1)
ms1 <- MuMIn::dredge(fm1, na.action('na.fail'))
options(na.action = "na.fail")
ms1 <- MuMIn::dredge(fm1)
confset.95p <- get.models(ms1, subset = cumsum(weight) <= .95)
avgm <- model.avg(confset.95p)
nseq <- function(x, len = length(x)) seq(min(x, na.rm = TRUE),
max(x, na.rm=TRUE), length = len)
# New predictors: X1 along the range of original data, other
# variables held constant at their means
newdata <- as.data.frame(lapply(lapply(Cement[, -1], mean), rep, 25))
View(newdata)
newdata$X1 <- nseq(Cement$X1, nrow(newdata))
n <- length(confset.95p)
# Predictions from each of the models in a set, and with averaged coefficients
pred <- data.frame(
model = sapply(confset.95p, predict, newdata = newdata),
averaged.subset = predict(avgm, newdata, full = FALSE),
averaged.full = predict(avgm, newdata, full = TRUE)
)
model = sapply(confset.95p, predict, newdata = newdata)
newdata = newdata %>%
rename(x1 = X1, x2 = X2, x3 = X3, x4 = X4)
n <- length(confset.95p)
# Predictions from each of the models in a set, and with averaged coefficients
pred <- data.frame(
model = sapply(confset.95p, predict, newdata = newdata),
averaged.subset = predict(avgm, newdata, full = FALSE),
averaged.full = predict(avgm, newdata, full = TRUE)
)
View(pred)
# Predictions from each of the models in a set, and with averaged coefficients
pred <- data.frame(
model = sapply(confset.95p, predict, newdata = newdata),
averaged.subset = predict(avgm, newdata, full = FALSE, interval = 0.95),
averaged.full = predict(avgm, newdata, full = TRUE)
)
# Predictions from each of the models in a set, and with averaged coefficients
pred <- data.frame(
model = sapply(confset.95p, predict, newdata = newdata),
averaged.subset = predict(avgm, newdata, full = FALSE, se.fit = TRUE),
averaged.full = predict(avgm, newdata, full = TRUE)
)
options(na.action = "na.omit")
newdata <- matrix(nrow = 24, ncol = 4)
newdata[c(1:12), 1] = DI; newdata[c(13:24), 1] = JS
newdata[c(1:24), 2] = year
newdata[c(1:24), 3] = spp
newdata = data.frame(newdata)
newdata = newdata %>%
rename(site.region = `X1`, year = `X2`, spp = `X3`) %>%
select(-X4)
pred <- data.frame(
model = sapply(confleps, predict, newdata = newdata),
averaged.full = predict(lepavg, newdata, full = TRUE)
)
confleps
pred <- data.frame(
model = sapply(confleps, predict, newdata = newdata),
averaged.full = predict(lepavg, newdata, full = TRUE, backtransform = TRUE)
)
pred <- data.frame(
model = sapply(confleps, predict, newdata = newdata),
averaged.full = predict(lepavg, newdata, full = TRUE, backtransform = TRUE, type = 'link')
)
library(tidyverse)
library(glmmTMB)
library(ggeffects)
library(DHARMa)
library(MuMIn)
library(cowplot)
library(AICcmodavg)
lepmod.crossed_dredge
View(lepmod.crossed_dredge)
lepmod.crossed_dredge
lepmod.crossed_dredge
calmod.crossed_dredge
lep1 = glmmTMB(all.leps ~ site.region + year + spp +
site.region * year +
(1 | collection), data = mainlice, family = nbinom2)
lep2 = glmmTMB(all.leps ~ site.region + year + spp +
spp * year + site.region * year +
(1 | collection), data = mainlice, family = nbinom2)
lep1 = glmmTMB(all.leps ~ site.region + year + spp +
site.region * year +
(1 | collection), data = mainlice, family = nbinom2)
lep2 = glmmTMB(all.leps ~ site.region + year + spp +
spp * year + site.region * year +
(1 | collection), data = mainlice, family = nbinom2)
lep3 = glmmTMB(all.leps ~ site.region + year + spp +
spp * site.region + site.region * year +
(1 | collection), data = mainlice, family = nbinom2)
lep4 = glmmTMB(all.leps ~ site.region + year + spp +
spp * site.region + spp * year + site.region * year +
(1 | collection), data = mainlice, family = nbinom2)
lep5 = glmmTMB(all.leps ~ site.region + year + spp +
(1 | collection), data = mainlice, family = nbinom2)
lep6 = glmmTMB(all.leps ~ site.region + year + spp +
spp * year +
(1 | collection), data = mainlice, family = nbinom2)
lep7 = glmmTMB(all.leps ~ site.region + year + spp +
spp * site.region +
(1 | collection), data = mainlice, family = nbinom2)
lep8 = glmmTMB(all.leps ~ site.region + year + spp +
spp * site.region + spp * year +
(1 | collection), data = mainlice, family = nbinom2)
lep9 = glmmTMB(all.leps ~ site.region + year +
site.region * year +
(1 | collection), data = mainlice, family = nbinom2)
lep10 = glmmTMB(all.leps ~ site.region + year +
(1 | collection), data = mainlice, family = nbinom2)
cal1 = glmmTMB(all.cal ~ site.region + year + spp +
site.region * year + site.region * spp +
(1 | collection), data = mainlice, family = nbinom2)
cal2 = glmmTMB(all.cal ~ site.region + year + spp +
site.region * year +
(1 | collection), data = mainlice, family = nbinom2)
cal3 = glmmTMB(all.cal ~ site.region + year + spp +
spp * site.region + site.region * year + spp * year +
(1 | collection), data = mainlice, family = nbinom2)
cal4 = glmmTMB(all.cal ~ site.region + year + spp +
spp * year + site.region * year +
(1 | collection), data = mainlice, family = nbinom2)
cal5 = glmmTMB(all.cal ~ site.region + year + spp +
(1 | collection), data = mainlice, family = nbinom2)
cal6 = glmmTMB(all.cal ~ site.region + year + spp +
site.region * year +
(1 | collection), data = mainlice, family = nbinom2)
cal7 = glmmTMB(all.cal ~ site.region + year + spp +
spp * year +
(1 | collection), data = mainlice, family = nbinom2)
cal8 = glmmTMB(all.cal ~ site.region + year + spp +
spp * site.region + spp * year +
(1 | collection), data = mainlice, family = nbinom2)
cal9 = glmmTMB(all.cal ~ site.region + year +
site.region * year +
(1 | collection), data = mainlice, family = nbinom2)
cal10 = glmmTMB(all.cal ~ site.region + year +
(1 | collection), data = mainlice, family = nbinom2)
lepmod.crossed_dredge
calmod.crossed_dredge
lep1pred <- ggpredict(lep1, terms = c('spp', 'year', 'site.region'))
lep2pred <- ggpredict(lep2, terms = c('spp', 'year', 'site.region'))
lep3pred <- ggpredict(lep3, terms = c('spp', 'year', 'site.region'))
lep4pred <- ggpredict(lep4, terms = c('spp', 'year', 'site.region'))
lep5pred <- ggpredict(lep5, terms = c('spp', 'year', 'site.region'))
lep6pred <- ggpredict(lep6, terms = c('spp', 'year', 'site.region'))
lep7pred <- ggpredict(lep7, terms = c('spp', 'year', 'site.region'))
lep8pred <- ggpredict(lep8, terms = c('spp', 'year', 'site.region'))
calcal
cal1pred <- ggpredict(cal1, terms = c('spp', 'year', 'site.region'))
cal2pred <- ggpredict(cal2, terms = c('spp', 'year', 'site.region'))
cal3pred <- ggpredict(cal3, terms = c('spp', 'year', 'site.region'))
cal4pred <- ggpredict(cal4, terms = c('spp', 'year', 'site.region'))
cal5pred <- ggpredict(cal5, terms = c('spp', 'year', 'site.region'))
cal6pred <- ggpredict(cal6, terms = c('spp', 'year', 'site.region'))
cal7pred <- ggpredict(cal7, terms = c('spp', 'year', 'site.region'))
cal8pred <- ggpredict(cal8, terms = c('spp', 'year', 'site.region'))
View(cal4pred)
#start by getting them all in one dataframe with the weights
lepavgpred = cbind(lep1pred$predicted, lep2pred$predicted, lep3pred$predicted, lep4pred$predicted,
lep5pred$predicted, lep6pred$predicted, lep7pred$predicted, lep8pred$predicted)
calavgpred = cbind(cal1pred$predicted, cal2pred$predicted, cal3pred$predicted, cal4pred$predicted,
cal5pred$predicted, cal6pred$predicted, cal7pred$predicted, cal8pred$predicted)
#start by getting them all in one dataframe with the weights
lepavgpred = data.frame(cbind(lep1pred$predicted, lep2pred$predicted, lep3pred$predicted, lep4pred$predicted,
lep5pred$predicted, lep6pred$predicted, lep7pred$predicted, lep8pred$predicted))
calavgpred = data.frame(cbind(cal1pred$predicted, cal2pred$predicted, cal3pred$predicted, cal4pred$predicted,
cal5pred$predicted, cal6pred$predicted, cal7pred$predicted, cal8pred$predicted))
View(calavgpred)
View(cal1pred)
#start by getting them all in one dataframe with the weights
lepavgpred = data.frame(cbind(lep1pred$predicted, lep2pred$predicted, lep3pred$predicted, lep4pred$predicted,
lep5pred$predicted, lep6pred$predicted, lep7pred$predicted, lep8pred$predicted)) %>%
rename(lep1 = X1, lep2 = X2, lep3 = X3, lep4 = X4, lep5 = X5, lep6 = X6, lep7 = X7, lep8 = X8)
calavgpred = data.frame(cbind(cal1pred$predicted, cal2pred$predicted, cal3pred$predicted, cal4pred$predicted,
cal5pred$predicted, cal6pred$predicted, cal7pred$predicted, cal8pred$predicted)) %>%
rename(cal1 = X1, cal2 = X2, cal3 = X3, cal4 = X4, cal5 = X5, cal6 = X6, cal7 = X7, cal8 = X8)
View(calavgpred)
View(lepmod.crossed_dredge)
mutate(w1 = rep(lepmod.crossed_dredge[24, "weight"], length(lepavgpred))
lepavgpred = lepavgpred %>%
lepavgpred = lepavgpred %>%
mutate(w1 = rep(lepmod.crossed_dredge[24, "weight"], length(lepavgpred)))
lepavgpred = lepavgpred %>%
mutate(w1 = rep(lepmod.crossed_dredge[1, -1], length(lepavgpred)))
rep(lepmod.crossed_dredge[1, -1], length(lepavgpred))
lepmod.crossed_dredge[1, -1]
str(lepmod.crossed_dredge)
lepmod.crossed_dredge$weight
lepmod.crossed_dredge$weight[1]
w1 = rep(lepmod.crossed_dredge$weight[1], length(lepavgpred))
lepavgpred = lepavgpred %>%
mutate(w1 = rep(lepmod.crossed_dredge$weight[1], nrow(lepavgpred)))
View(lepavgpred)
lepavgpred = lepavgpred %>%
mutate(w1 = rep(lepmod.crossed_dredge$weight[1], nrow(lepavgpred)),
w2 = rep(lepmod.crossed_dredge$weight[2], nrow(lepavgpred)),
w3 = rep(lepmod.crossed_dredge$weight[3], nrow(lepavgpred)),
w4 = rep(lepmod.crossed_dredge$weight[4], nrow(lepavgpred)),
w5 = rep(lepmod.crossed_dredge$weight[5], nrow(lepavgpred)),
w6 = rep(lepmod.crossed_dredge$weight[6], nrow(lepavgpred)),
w7 = rep(lepmod.crossed_dredge$weight[7], nrow(lepavgpred)),
w8 = rep(lepmod.crossed_dredge$weight[8], nrow(lepavgpred)))
View(lep1pred)
calavgpred = calavgpred %>%
mutate(w1 = rep(calmod.crossed_dredge$weight[1], nrow(calavgpred)),
w2 = rep(calmod.crossed_dredge$weight[2], nrow(calavgpred)),
w3 = rep(calmod.crossed_dredge$weight[3], nrow(calavgpred)),
w4 = rep(calmod.crossed_dredge$weight[4], nrow(calavgpred)),
w5 = rep(calmod.crossed_dredge$weight[5], nrow(calavgpred)),
w6 = rep(calmod.crossed_dredge$weight[6], nrow(calavgpred)),
w7 = rep(calmod.crossed_dredge$weight[7], nrow(calavgpred)),
w8 = rep(calmod.crossed_dredge$weight[8], nrow(calavgpred)))
lepallpred = data.frame(cbind(lep1pred$predicted, lep2pred$predicted, lep3pred$predicted, lep4pred$predicted,
lep5pred$predicted, lep6pred$predicted, lep7pred$predicted, lep8pred$predicted)) %>%
rename(lep1 = X1, lep2 = X2, lep3 = X3, lep4 = X4, lep5 = X5, lep6 = X6, lep7 = X7, lep8 = X8)
calallpred = data.frame(cbind(cal1pred$predicted, cal2pred$predicted, cal3pred$predicted, cal4pred$predicted,
cal5pred$predicted, cal6pred$predicted, cal7pred$predicted, cal8pred$predicted)) %>%
rename(cal1 = X1, cal2 = X2, cal3 = X3, cal4 = X4, cal5 = X5, cal6 = X6, cal7 = X7, cal8 = X8)
#add the weights from the model selection object
lepallpred = lepallpred %>%
mutate(w1 = rep(lepmod.crossed_dredge$weight[1], nrow(lepallpred)),
w2 = rep(lepmod.crossed_dredge$weight[2], nrow(lepallpred)),
w3 = rep(lepmod.crossed_dredge$weight[3], nrow(lepallpred)),
w4 = rep(lepmod.crossed_dredge$weight[4], nrow(lepallpred)),
w5 = rep(lepmod.crossed_dredge$weight[5], nrow(lepallpred)),
w6 = rep(lepmod.crossed_dredge$weight[6], nrow(lepallpred)),
w7 = rep(lepmod.crossed_dredge$weight[7], nrow(lepallpred)),
w8 = rep(lepmod.crossed_dredge$weight[8], nrow(lepallpred)))
calallpred = calallpred %>%
mutate(w1 = rep(calmod.crossed_dredge$weight[1], nrow(calallpred)),
w2 = rep(calmod.crossed_dredge$weight[2], nrow(calallpred)),
w3 = rep(calmod.crossed_dredge$weight[3], nrow(calallpred)),
w4 = rep(calmod.crossed_dredge$weight[4], nrow(calallpred)),
w5 = rep(calmod.crossed_dredge$weight[5], nrow(calallpred)),
w6 = rep(calmod.crossed_dredge$weight[6], nrow(calallpred)),
w7 = rep(calmod.crossed_dredge$weight[7], nrow(calallpred)),
w8 = rep(calmod.crossed_dredge$weight[8], nrow(calallpred)))
x = 2
y = 3
n = 4
e = 1
s = sum((x*y), (n*e))
s
#now make averaged predictions!
lepavgpred = lepallpred %>%
mutate(avg = sum((lep1*w1), (lep2*w2), (lep3*w3), (lep4*w4), (lep5*w5), (lep6*w6), (lep7*w7), (lep8*w8)))
View(lepavgpred)
lepallpred %>% lep1*w1
lepallpred %>% mutate(new = lep1*w1)
#now make averaged predictions!
lepavgpred = lepallpred %>%
mutate(lep1w = lep1*w1, lep2w = lep2*w2, lep3w = lep3*w3, lep4w = lep4*w4, lep5w = lep5*w5, lep6w = lep6*w6, lep7w = lep7*w7, lep8w = lep8*w8) %>%
mutate(avg = lep1w + lep2w + lep3w + lep4w + lep5w + lep6w + lep7w + lep8w + lep9w)
#now make averaged predictions!
lepavgpred = lepallpred %>%
mutate(lep1w = lep1*w1, lep2w = lep2*w2, lep3w = lep3*w3, lep4w = lep4*w4, lep5w = lep5*w5, lep6w = lep6*w6, lep7w = lep7*w7, lep8w = lep8*w8) %>%
mutate(avg = lep1w + lep2w + lep3w + lep4w + lep5w + lep6w + lep7w + lep8w)
3.058910e-01*0.5286254
0.00115533587.099949e-03
0.00115533587*099949e-03
0.001155335*7.099949e-03
2.556619e-03+3.562705e-03+5.112328e-04+8.858067e-04+3.652734e-05+4.148802e-05+6.669713e-06+8.202822e-06
lepallpred = data.frame(cbind(lep1pred$predicted, lep2pred$predicted, lep3pred$predicted, lep4pred$predicted,
lep5pred$predicted, lep6pred$predicted, lep7pred$predicted, lep8pred$predicted)) %>%
rename(lep1 = X1, lep2 = X2, lep3 = X3, lep4 = X4, lep5 = X5, lep6 = X6, lep7 = X7, lep8 = X8)
calallpred = data.frame(cbind(cal1pred$predicted, cal2pred$predicted, cal3pred$predicted, cal4pred$predicted,
cal5pred$predicted, cal6pred$predicted, cal7pred$predicted, cal8pred$predicted)) %>%
rename(cal1 = X1, cal2 = X2, cal3 = X3, cal4 = X4, cal5 = X5, cal6 = X6, cal7 = X7, cal8 = X8)
#add the weights from the model selection object
lepallpred = lepallpred %>%
mutate(w1 = rep(lepmod.crossed_dredge$weight[1], nrow(lepallpred)),
w2 = rep(lepmod.crossed_dredge$weight[2], nrow(lepallpred)),
w3 = rep(lepmod.crossed_dredge$weight[3], nrow(lepallpred)),
w4 = rep(lepmod.crossed_dredge$weight[4], nrow(lepallpred)),
w5 = rep(lepmod.crossed_dredge$weight[5], nrow(lepallpred)),
w6 = rep(lepmod.crossed_dredge$weight[6], nrow(lepallpred)),
w7 = rep(lepmod.crossed_dredge$weight[7], nrow(lepallpred)),
w8 = rep(lepmod.crossed_dredge$weight[8], nrow(lepallpred)))
calallpred = calallpred %>%
mutate(w1 = rep(calmod.crossed_dredge$weight[1], nrow(calallpred)),
w2 = rep(calmod.crossed_dredge$weight[2], nrow(calallpred)),
w3 = rep(calmod.crossed_dredge$weight[3], nrow(calallpred)),
w4 = rep(calmod.crossed_dredge$weight[4], nrow(calallpred)),
w5 = rep(calmod.crossed_dredge$weight[5], nrow(calallpred)),
w6 = rep(calmod.crossed_dredge$weight[6], nrow(calallpred)),
w7 = rep(calmod.crossed_dredge$weight[7], nrow(calallpred)),
w8 = rep(calmod.crossed_dredge$weight[8], nrow(calallpred)))
#now make averaged predictions!
lepallpred = lepallpred %>%
mutate(lep1w = lep1*w1, lep2w = lep2*w2, lep3w = lep3*w3, lep4w = lep4*w4, lep5w = lep5*w5, lep6w = lep6*w6, lep7w = lep7*w7, lep8w = lep8*w8) %>%
mutate(avg = lep1w + lep2w + lep3w + lep4w + lep5w + lep6w + lep7w + lep8w)
calallpred = calallpred %>%
mutate(cal1w = cal1*w1, cal2w = cal2*w2, cal3w = cal3*w3, cal4w = cal4*w4, cal5w = cal5*w5, cal6w = cal6*w6, cal7w = cal7*w7, cal8w = cal8*w8) %>%
mutate(avg = cal1w + cal2w + cal3w + cal4w + cal5w + cal6w + cal7w + cal8w)
#keep just the averaged predictions and the relevant grouping info
lepavgpred = lepallpred %>%
select(avg) %>%
mutate(sal = lep1pred$x, reg = lep1pred$facet, yr = lep1pred$group)
View(lepavgpred)
x
install.packages('latex')
install.packages('latexpdf')
library(latexpdf)
newdata <- matrix(nrow = 24, ncol = 4)
newdata[c(1:12), 1] = DI; newdata[c(13:24), 1] = JS
newdata[c(1:24), 2] = year
newdata[c(1:24), 3] = spp
newdata = data.frame(newdata)
newdata = newdata %>%
rename(site.region = `X1`, year = `X2`, spp = `X3`, collection = `X4`) %>%
pred <- data.frame(
model = sapply(confleps, predict, newdata = newdata),
averaged.full = predict(lepavg, newdata, full = TRUE, backtransform = TRUE)
)
newdata = newdata %>%
rename(site.region = `X1`, year = `X2`, spp = `X3`, collection = `X4`) %>%
# Predictions from each of the models in a set, and with averaged coefficients
n = length(confleps)
newdata = newdata %>%
rename(site.region = `X1`, year = `X2`, spp = `X3`, collection = `X4`)
pred <- data.frame(
model = sapply(confleps, predict, newdata = newdata),
averaged.full = predict(lepavg, newdata, full = TRUE, backtransform = TRUE)
)
View(pred)
pred <- data.frame(
model = sapply(confleps, predict, newdata = newdata),
averaged.full = predict(lepavg, newdata, full = TRUE)
)
