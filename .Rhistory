0.000018,
0.000005,
0.0000008,
0.01,
0.0000184,
0.0000082,
0.00099,
0.000491,
0.00000039,
0.00000093,
0.00000014,
0.0001417,
0.00000452,
0.00000035,
0.00000019)
mes <- c(0.00045,
0.0007,
0.0007,
0.0007,
0.00075,
0.00075,
0.0012,
0.010,
0.020,
0.020,
0.032,
0.048,
0.05,
0.050,
0.050,
0.050,
0.055,
0.055,
0.060,
0.062,
0.063,
0.065,
0.080,
0.080,
0.080,
0.080,
0.080,
0.100,
0.100,
0.100,
0.120,
0.125,
0.125,
0.150,
0.153,
0.153,
0.153,
0.200,
0.200,
0.200,
0.200,
0.250,
0.250,
0.250,
0.300,
0.300,
0.300,
0.300,
0.300,
0.300,
0.300,
0.330,
0.330,
0.330,
0.330,
0.330,
0.330,
0.330,
0.333,
0.333,
0.333,
0.333,
0.333,
0.333,
0.333,
0.333,
0.333,
0.333,
0.335,
0.335,
0.335,
0.350,
0.350,
0.350,
0.368,
0.450,
0.500,
0.500,
0.500,
0.505)
mesh <- data.frame(mes)
conc <- data.frame(con)
mesh$mes <- as.factor(mesh$mes)
mesh_sizes <- unique(mesh$mes)
env_data <- cbind(mesh, conc)
env_data_grouped <- env_data %>%
group_by(mes) %>%
dplyr::summarize(., count = n(), mean = base::mean(con), max = max(con), min = min(con))
p1 <- ggplot(data = env_data, aes(x = mesh, y = conc)) +
geom_smooth(method = 'lm', formula = y ~ x^2) +
stat_poly_eq(parse = TRUE, aes(label = ..eq.label..), formula = y~x)
p1
p1 <- ggplot(data = env_data, aes(x = mesh, y = conc)) +
geom_smooth(method = 'lm', formula = y ~ x)
p1
env_data <- cbind(mesh, conc)
View(env_data)
p1 <- ggplot(data = env_data, aes(x = mes, y = conc)) +
geom_smooth(method = 'lm', formula = y ~ x) +
stat_poly_eq(parse = TRUE, aes(label = ..eq.label..), formula = y~x)
p1
p1 <- ggplot(data = env_data, aes(x = mes, y = con)) +
geom_smooth(method = 'lm', formula = y ~ x) +
stat_poly_eq(parse = TRUE, aes(label = ..eq.label..), formula = y~x)
p1
p1 <- ggplot(data = env_data, aes(x = mes, y = con)) +
geom_smooth(method = 'lm', formula = y ~ x)
p1
ggplot(data = env_data) +
geom_smooth(aes(x = mes, y = con))
ggplot(data = env_data) +
geom_smooth(aes(x = mes, y = con))
ggplot(data = env_data) +
geom_point(aes(x = mes, y = con))
ggplot(data = env_data) +
geom_point(aes(x = mes, y = con))+
geom_smooth(aes(x = mes, y = con), method = 'lm')
future_plastic <- ggplot(data = plastic_production, aes(x = years, y = plastic)) +
geom_smooth(method = 'loess', formula = y ~ x^2) +
annotate(geom = 'text', label = 'y = 0.1064^2 - 409.08x + 400055')
future_plastic
future_plastic <- ggplot(data = plastic_production, aes(x = years, y = plastic)) +
geom_smooth(method = 'loess', formula = y ~ x^2) +
annotate(geom = 'text', label = 'y = 0.1064^2 - 409.08x + 400055', x = 1980, y = 350)
future_plastic
future_plastic <- ggplot(data = plastic_production, aes(x = years, y = plastic)) +
geom_smooth(method = 'loess', formula = y ~ x^2) +
annotate(geom = 'text', label = 'y = 0.1064x^2 - 409.08x + 400055', x = 1980, y = 350)
future_plastic
#future plastic
future_years <- c(2050, 2100)
future_formula <- function(x) {
conc = 0.1064*((x)^2) - 409.08*(x) + 400055
}
future_formula(1980)
x1980 <- future_formula(1980)
x1980
0.1064*((1980)^2) - 409.08*(1980) + 400055
0.1064*((30)^2) - 409.08*(30) + 400055
future_formula <- function(x) {
conc = 0.1064*((x)^2) - 1.4279*(x) + 11.043
}
x1980 <- future_formula(1980)
x1980
x1980 <- future_formula(65)
x1980
0.1064*((30)^2) - 409.08*(30) + 400055
x1980 <- future_formula(65)
x1980
current_plastic <- ggplot(data = plastic_production, aes(x = years, y = plastic)) +
geom_smooth(method = 'loess', formula = y ~ x^2) +
annotate(geom = 'text', label = 'y = 0.1064x^2 - 1.4279x + 11.043', x = 1980, y = 350)
current_plastic
current_plastic <- ggplot(data = plastic_production, aes(x = years, y = plastic)) +
geom_smooth(method = 'loess', formula = y ~ x^2) +
annotate(geom = 'text', label = 'y = 0.1064x^2 - 1.4279x + 11.043', x = 1980, y = 350, type = 'italics')
current_plastic <- ggplot(data = plastic_production, aes(x = years, y = plastic)) +
geom_smooth(method = 'loess', formula = y ~ x^2) +
annotate(geom = 'text', label = 'y = 0.1064x^2 - 1.4279x + 11.043', x = 1980, y = 350, fontface = 'italic')
current_plastic
current_plastic <- ggplot(data = plastic_production, aes(x = years, y = plastic)) +
geom_smooth(method = 'loess', formula = y ~ x^2) +
annotate(geom = 'text', label = 'y = 0.1064x\^2 - 1.4279x + 11.043', x = 1980, y = 350, fontface = 'italic')
current_plastic <- ggplot(data = plastic_production, aes(x = years, y = plastic)) +
geom_smooth(method = 'loess', formula = y ~ x^2) +
annotate(geom = 'text', label = 'y = 0.1064x/^2 - 1.4279x + 11.043', x = 1980, y = 350, fontface = 'italic')
current_plastic
current_plastic <- ggplot(data = plastic_production, aes(x = years, y = plastic)) +
geom_smooth(method = 'loess', formula = y ~ x^2) +
annotate(geom = 'text', label = 'y = 0.1064x^2== - 1.4279x + 11.043', x = 1980, y = 350, fontface = 'italic')
current_plastic
eqn <- paste('y = 0.1064x^2 == - 1.4279x + 11.043', round(runif(1),4))
current_plastic <- ggplot(data = plastic_production, aes(x = years, y = plastic)) +
geom_smooth(method = 'loess', formula = y ~ x^2) +
annotate(geom = 'text', label = eqn, x = 1980, y = 350, fontface = 'italic', parse = TRUE)
current_plastic
eqn <- paste('y = 0.1064x^2-1.4279x + 11.043', round(runif(1),4))
current_plastic <- ggplot(data = plastic_production, aes(x = years, y = plastic)) +
geom_smooth(method = 'loess', formula = y ~ x^2) +
annotate(geom = 'text', label = 'y = 0.1064x^2-1.4279x + 11.043', x = 1980, y = 350, fontface = 'italic', parse = TRUE)
current_plastic
current_plastic <- ggplot(data = plastic_production, aes(x = years, y = plastic)) +
geom_smooth(method = 'loess', formula = y ~ x^2) +
annotate(geom = 'text', label = 'y = 0.1064x^2 - 1.4279x + 11.043', x = 1980, y = 350, fontface = 'italic')
current_plastic
future_production <- future_formula(future_years)
future_production
2050-2015
65+35
#future plastic
future_years <- c(100, 150)
future_production <- future_formula(future_years)
future_production
current_plastic <- future_formula(68)
current_plastic
future_production_ratio <- future_production/current_plastic
future_production_ratio
current_plastic <- future_formula(63) #for 2013 since that's when our max in the experiments were
future_years <- c(100, 150)
future_production <- future_formula(future_years)
future_production_ratio <- future_production/current_plastic
future_production_ratio
6.380144*1.77
pollution_exp = seq(1,100,by = 1)
phi100 <- as.numeric(lapply(pollution_real, EC50fun))
alpha100 <- as.numeric(lapply(pollution_real, LC50fun))
alpha100[98:100] <- 1 #to cap the mortality at 100%
#run lsoda to do the solving for me
#make a matrix for the results of the simulations etc.
sim.matrix <- matrix(nrow = 125,ncol = 100)
#run for loop doing the desolve at each concentration level
for(i in 1:100) {
#starting conditions
N0 <- 50
#set amount of time steps to run in simulation
TT <- seq(1,125,1)
#give parameters
alpha <- alpha100[i]
phi <- phi100[i]
k <- 5000
b <- 0.26
u <- 0.03
parms <- c(b,phi,k,u,alpha)
#run lsoda, which is an ODE solver in the deSolve package, and save the results into an object
sim.results <- lsoda(N0, TT, daphgrow, parms)
sim.matrix[,i] <- sim.results[,2] #add the results to the matrix one by one
}
library(tidyverse)
library(deSolve)
library(GillespieSSA)
library(ecotoxicology)
library(BiocManager)
library(drc)
library(sandwich)
library(lmtest)
library(multcomp)
#run lsoda to do the solving for me
#make a matrix for the results of the simulations etc.
sim.matrix <- matrix(nrow = 125,ncol = 100)
#run for loop doing the desolve at each concentration level
for(i in 1:100) {
#starting conditions
N0 <- 50
#set amount of time steps to run in simulation
TT <- seq(1,125,1)
#give parameters
alpha <- alpha100[i]
phi <- phi100[i]
k <- 5000
b <- 0.26
u <- 0.03
parms <- c(b,phi,k,u,alpha)
#run lsoda, which is an ODE solver in the deSolve package, and save the results into an object
sim.results <- lsoda(N0, TT, daphgrow, parms)
sim.matrix[,i] <- sim.results[,2] #add the results to the matrix one by one
}
#pick the columns I want
select_res <- data.frame(cbind(c(1:125),sim.matrix[,1], sim.matrix[,50], sim.matrix[,100]))
colnames(select_res) <- c('Day', 'Low', 'Med', 'High')
#make a theme
theme1 <- function(){
color.background = 'white'
color.grid.major = 'black'
color.axis.text = 'black'
color.axis.title = 'black'
color.title = 'black'
theme_bw(base_size = 9) +
theme(panel.background = element_rect(fill=color.background,color = color.background)) +
theme(plot.background = element_rect(fill = color.background, color = color.background)) +
theme(panel.border = element_rect(colour = 'black')) +
theme(panel.grid.major = element_blank()) +
theme(panel.grid.minor = element_blank()) +
theme(axis.ticks = element_blank()) +
theme(plot.title = element_text(color = color.title, size = 15, vjust = 1.25)) +
theme(axis.text.x = element_text(size = 10, color = color.axis.text)) +
theme(axis.text.y = element_text(size = 10, color = color.axis.text)) +
theme(axis.title.x = element_text(size = 12, color = color.axis.title, vjust = 0)) +
theme(axis.title.y = element_text(size = 12, color = color.axis.title, vjust = 1.25)) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.line.x = element_line(color="black", size = 0.15),
axis.line.y = element_line(color="black", size = 0.15)) +
theme(strip.background = element_blank(),
strip.placement = 'outside',
strip.text = element_text(size = 10))+
theme(legend.position = 'right')
}
deterministic_plot <- ggplot() +
geom_line(data = select_res, aes(x = Day, y = Low), colour = 'green4', size =1) +
geom_line(data = select_res, aes(x = Day, y = Med), colour = 'blue3', size =1) +
geom_line(data = select_res, aes(x = Day, y = High), colour = 'red4', size =1) +
theme1() +
labs(x = 'Day', y = 'Number of Daphnids', title = 'Effects of Increasing Concentration on Daphnia Population Growth')+
annotate('text', x = 80, y = 4320, label = 'Low = 0mg/L', size = 3.5, colour = 'green4')+
annotate('text', x = 80, y = 3500, label = 'Medium = 16mg/L', size = 3.5, colour = 'blue3')+
annotate('text', x = 80, y = 800, label = 'High = 29mg/L', size = 3.5, colour = 'red4')
deterministic_plot
#pick the columns I want
select_res <- data.frame(cbind(c(1:125),sim.matrix[,1], sim.matrix[,11], sim.matrix[,20]))
colnames(select_res) <- c('Day', 'Low', 'Med', 'High')
#make a theme
theme1 <- function(){
color.background = 'white'
color.grid.major = 'black'
color.axis.text = 'black'
color.axis.title = 'black'
color.title = 'black'
theme_bw(base_size = 9) +
theme(panel.background = element_rect(fill=color.background,color = color.background)) +
theme(plot.background = element_rect(fill = color.background, color = color.background)) +
theme(panel.border = element_rect(colour = 'black')) +
theme(panel.grid.major = element_blank()) +
theme(panel.grid.minor = element_blank()) +
theme(axis.ticks = element_blank()) +
theme(plot.title = element_text(color = color.title, size = 15, vjust = 1.25)) +
theme(axis.text.x = element_text(size = 10, color = color.axis.text)) +
theme(axis.text.y = element_text(size = 10, color = color.axis.text)) +
theme(axis.title.x = element_text(size = 12, color = color.axis.title, vjust = 0)) +
theme(axis.title.y = element_text(size = 12, color = color.axis.title, vjust = 1.25)) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.line.x = element_line(color="black", size = 0.15),
axis.line.y = element_line(color="black", size = 0.15)) +
theme(strip.background = element_blank(),
strip.placement = 'outside',
strip.text = element_text(size = 10))+
theme(legend.position = 'right')
}
deterministic_plot <- ggplot() +
geom_line(data = select_res, aes(x = Day, y = Low), colour = 'green4', size =1) +
geom_line(data = select_res, aes(x = Day, y = Med), colour = 'blue3', size =1) +
geom_line(data = select_res, aes(x = Day, y = High), colour = 'red4', size =1) +
theme1() +
labs(x = 'Day', y = 'Number of Daphnids', title = 'Effects of Increasing Concentration on Daphnia Population Growth')+
annotate('text', x = 80, y = 4320, label = 'Low = 0mg/L', size = 3.5, colour = 'green4')+
annotate('text', x = 80, y = 3500, label = 'Medium = 16mg/L', size = 3.5, colour = 'blue3')+
annotate('text', x = 80, y = 800, label = 'High = 29mg/L', size = 3.5, colour = 'red4')
deterministic_plot
#pick the columns I want
select_res <- data.frame(cbind(c(1:125),sim.matrix[,1], sim.matrix[,11], sim.matrix[,30]))
colnames(select_res) <- c('Day', 'Low', 'Med', 'High')
#make a theme
theme1 <- function(){
color.background = 'white'
color.grid.major = 'black'
color.axis.text = 'black'
color.axis.title = 'black'
color.title = 'black'
theme_bw(base_size = 9) +
theme(panel.background = element_rect(fill=color.background,color = color.background)) +
theme(plot.background = element_rect(fill = color.background, color = color.background)) +
theme(panel.border = element_rect(colour = 'black')) +
theme(panel.grid.major = element_blank()) +
theme(panel.grid.minor = element_blank()) +
theme(axis.ticks = element_blank()) +
theme(plot.title = element_text(color = color.title, size = 15, vjust = 1.25)) +
theme(axis.text.x = element_text(size = 10, color = color.axis.text)) +
theme(axis.text.y = element_text(size = 10, color = color.axis.text)) +
theme(axis.title.x = element_text(size = 12, color = color.axis.title, vjust = 0)) +
theme(axis.title.y = element_text(size = 12, color = color.axis.title, vjust = 1.25)) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.line.x = element_line(color="black", size = 0.15),
axis.line.y = element_line(color="black", size = 0.15)) +
theme(strip.background = element_blank(),
strip.placement = 'outside',
strip.text = element_text(size = 10))+
theme(legend.position = 'right')
}
deterministic_plot <- ggplot() +
geom_line(data = select_res, aes(x = Day, y = Low), colour = 'green4', size =1) +
geom_line(data = select_res, aes(x = Day, y = Med), colour = 'blue3', size =1) +
geom_line(data = select_res, aes(x = Day, y = High), colour = 'red4', size =1) +
theme1() +
labs(x = 'Day', y = 'Number of Daphnids', title = 'Effects of Increasing Concentration on Daphnia Population Growth')+
annotate('text', x = 80, y = 4320, label = 'Low = 0mg/L', size = 3.5, colour = 'green4')+
annotate('text', x = 80, y = 3500, label = 'Medium = 16mg/L', size = 3.5, colour = 'blue3')+
annotate('text', x = 80, y = 800, label = 'High = 29mg/L', size = 3.5, colour = 'red4')
deterministic_plot
#run lsoda to do the solving for me
#make a matrix for the results of the simulations etc.
sim.matrix <- matrix(nrow = 125,ncol = 100)
#run for loop doing the desolve at each concentration level
for(i in 1:100) {
#starting conditions
N0 <- 50
#set amount of time steps to run in simulation
TT <- seq(1,125,1)
#give parameters
alpha <- alpha100[i]
phi <- phi100[i]
k <- 5000
b <- 0.26
u <- 0.03
parms <- c(b,phi,k,u,alpha)
#run lsoda, which is an ODE solver in the deSolve package, and save the results into an object
sim.results <- lsoda(N0, TT, daphgrow, parms)
sim.matrix[,i] <- sim.results[,2] #add the results to the matrix one by one
}
View(sim.matrix)
####### Growth Function
daphgrow <- function(t, state, parameters) {
#this will calculate the population growth rate
N <- state
b <- parameters[1]
phi <- parameters[2]
k <- parameters[3]
u <- parameters[4]
alpha <- parameters[5]
dN = (b-(b*phi))*N*(1-(N/k)) - (u+alpha)*N
return(list(c(dN)))
}
#make data for both the reproduction one (KIM) and the bees one
concentrationKIM <- c(1,5,10,20,30,40,60,80) #first row is concentration (mg/L)
exposureKIM <- c(40,40,40,40,40,40,40,40) #second row is number of exposed
mortalityKIM <- c(0,0,0,0.125,0.075,0.45,0.625,0.9)#third row is number of dead
responseBES1 <- c(62,59,59,65,56,60,58,60,42,46)
responseBES <- c(((62/59.8960)-1),(1-(59/59.8960)),((59/59.8960)-1),((65/59.8960)-1),(1-(56/59.8960)),((60/59.8960)-1),
(1-(58/59.8960)),((60/59.8960)-1),(1-(42/59.8960)),(1-(46/59.8960))) #reduction in neonate number
concentrationBES <- c(0.22,0.44,0.88,1.8,3.5,7.0,14,32,70,150) #  nano-PS concentration (mg/L)
BESdata <- data.frame(cbind(responseBES,concentrationBES))
# for the concentrations, make them into number of particles per L
diam..cmBES = 0.000007
density..gm.cm3 = 1.05
density..mg.cm3 = 1050
volumeBES = (4/3)*pi*((diam..cmBES/2)^3)
mass1particleBES = volumeBES * density..mg.cm3
mass1particleBES
# so the mass of one particle is now in mg - so let's make our concentrations into number of particles
conc.mgLBES <- c(0.22,0.44,0.88,1.8,3.5,7.0,14,32,70,150) #in mg/L
conc.partLBES <- c(0.22/mass1particleBES,0.44/mass1particleBES,0.88/mass1particleBES,1.8/mass1particleBES,3.5/mass1particleBES,
7.0/mass1particleBES,14/mass1particleBES,32/mass1particleBES,70/mass1particleBES,150/mass1particleBES) #part/L
con.partmLBES <- conc.partLBES/1000 #part/mL
diam..cmKIM = 0.000019
volumeKIM = (4/3)*pi*((diam..cmKIM/2)^2)
mass1particleKIM = volumeKIM*density..mg.cm3
mass1particleKIM
con.mgLKIM <- c(1,5,10,20,30,40,60,80)
con.partLKIM <- c(1/mass1particleKIM,5/mass1particleKIM,10/mass1particleKIM,20/mass1particleKIM,30/mass1particleKIM,
40/mass1particleKIM,60/mass1particleKIM,80/mass1particleKIM) #part/L
con.partmLKIM <- con.partLKIM/1000 #part/mL
#run the model for EC50
EC50 <- drm(responseBES~ con.partmLBES, fct = LL.4()) #using the LL.4 one which is four parameter Log-logistic function with ED50 as parameter and a lower limit at 0
summary(EC50)
#create dose response function for EC50 - we're doing this as the relative decrease in reproduction
EC50fun <- function(x) {
d = 2.6539e-01
c = 2.7558e-02
e = 2.4728e+11
hill = -1
b = -3.1412e+01
y = c + ((d - c)/(1+((x)/(e))^(b)))
}
#now do model for LC50
LC50 <- drm(mortalityKIM~ con.partmLKIM, fct = LL.4()) #using the LL.4 one which is four parameter Log-logistic function with ED50 as parameter and a lower limit at 0
summary(LC50)
#create dose response function for EC50
LC50fun <- function(x) {
d = 1.2163e+00
c = -8.6477e-04
e = 1.4030e+05
hill = -1
b = -2.7187e+00
y = c + ((d - c)/(1+((x)/(e))^(b)))
}
# equation: y = -0.2367x + 0.0965 where x is mesh size and concentration is y
# so for my mesh size, I would need it to be smaller than the smallest particle which is 70nm in diameter, so I'm going to say I'm
# using a 65nm mesh or 0.065um or 0.000065mm mesh
# from kennedy's data: max = 1.77 part/mL with 0.08mm mesh, average is 0.05 part/mL with 0.333mm and  min = 0.000000028part/mL with 0.3mm
# so if I take the formula above and change those values such that they represent the smaller mesh sizes, I can use the slope
# to multiply through and get the values I would expect
min = 0.000000028
minmesh = 0.3
avg = 0.05
pollution_exp = seq(1,100,by = 1)
phi100 <- as.numeric(lapply(pollution_exp, EC50fun))
alpha100 <- as.numeric(lapply(pollution_exp, LC50fun))
alpha100[98:100] <- 1 #to cap the mortality at 100%
#run lsoda to do the solving for me
#make a matrix for the results of the simulations etc.
sim.matrix <- matrix(nrow = 125,ncol = 100)
#run for loop doing the desolve at each concentration level
for(i in 1:100) {
#starting conditions
N0 <- 50
#set amount of time steps to run in simulation
TT <- seq(1,125,1)
#give parameters
alpha <- alpha100[i]
phi <- phi100[i]
k <- 5000
b <- 0.26
u <- 0.03
parms <- c(b,phi,k,u,alpha)
#run lsoda, which is an ODE solver in the deSolve package, and save the results into an object
sim.results <- lsoda(N0, TT, daphgrow, parms)
sim.matrix[,i] <- sim.results[,2] #add the results to the matrix one by one
}
phi100
alpha100
